{
  "name": "webdav-one",
  "version": "1.0.0",
  "type": "commonjs",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "webdav-server": "^2.5.0"
  },
  "engines": {
    "node": ">=18"
  }
}

{
  "name": "webdav-two",
  "version": "1.0.0",
  "type": "commonjs",
  "description": "Minimal WebDAV server using Node.js and Express",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.4",
    "basic-auth": "^2.0.1"
  },
  "engines": {
    "node": ">=18"
  }
}

{
  "name": "webdav-server",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "webdav-server": "^2.5.0"
  },
  "engines": {
    "node": "16.x"
  }
}

{
    "name": "echo-server",
    "version": "1.0.0",
    "main": "server.js",
    "scripts": {
        "start": "node server.js"
    },
    "dependencies": {
        "express": "^4.21.2"
    },
    "engines": {
        "node": "16.x"
    }
}

Yes â€” you can absolutely use app.use(...) instead of app.all(...) for WebDAV methods like COPY. They are functionally equivalent if you're doing manual req.method checks inside.
These are equivalent:
// Using app.all
app.all('/*', (req, res, next) => {
    if (req.method !== 'COPY') return next()
    // handle COPY...
})
// Or Using app.use
app.use((req, res, next) => {
    if (req.method !== 'COPY') return next()
    // handle COPY...
})


Express only provides route methods for the standard HTTP methods defined in the HTTP/1.1 spec:
Built-in Express method	Purpose
app.get()       Retrieve data
app.post()      Submit data
app.put()       Replace data
app.delete()    Delete data
app.patch()	    Partial update
app.options()	  Preflight
app.head()	    Headers only
app.all()	      Any of the above
What about WebDAV methods like PROPFIND, MKCOL, MOVE, COPY, etc.?
These are not natively supported as top-level methods in Express.
To handle them, you have to use app.use(...) or app.all(...)

Middleware: Think of it like a filter or pipeline
Each request flows through the middleware stack. Each function can:
- read from the request (req)
- modify the response (res)
- terminate the request (by sending a response directly)
- or pass control to the next middleware with next()

cat cpanel-server-2.js | grep ^app
    app.use((req, res, next) => {
    app.options('/*', (req, res) => {
    app.use((req, res, next) => {
    app.use(express.raw({ type: '*/*' }))
    app.get('/*', (req, res) => {
    app.put('/*', (req, res) => {
    app.delete('/*', (req, res) => {
    app.use((req, res, next) => {
    app.all('/*', (req, res, next) => {
    app.all('/*', (req, res, next) => {
    app.all('/*', (req, res, next) => {
    app.use((req, res) => {
    app.listen(port, () => {

    const url = new URL(req.url)
    const path = url.pathname
    ->
    const path = new URL(req.url).pathname


## ðŸ§ª Custom Verb: `RESET`

This nonstandard method clears the server and restores a clean root. Uses curl, not browser.

```bash
curl -X RESET https://webdav-server.deno.dev/
```

github:
https://github.com/new
update .gitignore
git init
git remote add origin https://github.com/backspaces/webdav-servers.git
git add .
git commit -m "Initial commit of multi-platform WebDAV servers"
git push -u origin main

Tried Render: had cPanel-like fails!

Move to AWS / lightsail
https://lightsail.aws.amazon.com/
  click on >_ icon for ssh to project
Initialize:
  sudo apt update && sudo apt install -y unzip
Install Deno
  curl -fsSL https://deno.land/install.sh | sh
  Deno was installed successfully to /home/ubuntu/.deno/bin/deno
    Edit shell configs to add deno to the PATH? (Y/n) Y or cr
    This executes: export PATH="/home/ubuntu/.deno/bin:$PATH"
Install deno-cli (in webdav-servers repo, not on aws)
  chmod 400 lightsail-aws.pem # SSH will reject any private key that is readable by others
  scp -i lightsail-aws.pem deno-cli-server.js ubuntu@3.137.171.107:~
    deno-cli-server.js   100% 6503    92.4KB/s   00:00
    If you want to overwrite the file directly in place:
    scp -i lightsail-aws.pem deno-cli-server.js ubuntu@3.137.171.107:/home/ubuntu/
    Or if it's in a subdirectory:
    scp -i lightsail-aws.pem deno-cli-server.js ubuntu@3.137.171.107:/home/ubuntu/some-folder/
In aws:
  deno run -A --watch deno-cli-server.js



Refresh:
  source ~/.bashrc
Run your server
  deno run -A deno-cli-server.js

PORT=8000 deno run -A deno-cli-server.js
  Starting WebDAV server on http://localhost:8888
Lightsail for Research: just packages existing Lightsail instances
Set up completions
https://us-east-1.console.aws.amazon.com/billing
IPv4 address for ens5: 172.26.6.163


ssh -i lightsail-aws.pem ubuntu@3.137.171.107
pkill deno
screen -wipe
deno run -A deno-cli-server.js  # âœ… TEST first
# If it works:
Ctrl+C
screen -S denoserver
deno run -A deno-cli-server.js
Ctrl+A D

force remove a screen: screen -S 7295 -X quit
    This sends a quit command to the session with ID 7295